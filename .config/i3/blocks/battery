#!/usr/bin/env python
# -*- coding: utf8 -*-

"""
A blocklet for i3blocks which displays the battery status.

Requires Font Awesome for icons.
"""

from __future__ import unicode_literals


import os
import re

from collections import namedtuple
from subprocess import check_output


LEVELS = [
    (80, "#F3F4F5", ""),
    (60, "#EEE8AA", ""),
    (40, "#FFA500", ""),
    (15, "#E95420", ""),
    (0,  "#FF0000", ""),
]

Battery = namedtuple('Battery', ['id', 'perc', 'status', 'time'])


def get_color_icon(perc):
    for level in LEVELS:
        if perc >= level[0]:
            return (level[1], level[2])


def format_battery(battery):
    perc = int(battery.perc)
    is_charging = battery.status == 'Charging'
    is_discharging = battery.status == 'Discharging'

    color, icon = get_color_icon(perc)

    if is_discharging and battery.time:
        time = " ({})".format(battery.time[0:5])
    else:
        time = ''

    if is_charging:
        status = ' '
    elif is_discharging:
        status = ' '
    else:
        status = ''

    return '<span foreground="{}">{} {}%{}{}</span>' \
        .format(color, icon, perc, status, time) \
        .encode('utf-8')


def get_battery_data():
    output = check_output(["acpi", "-b"])
    lines = output.split("\n")

    pattern = '^Battery ' \
              '(?P<id>\d+): ' \
              '(?P<status>\w+), ' \
              '(?P<perc>\d+)%' \
              '(, (?P<time>\d{2}:\d{2}:\d{2}))?'

    matches = [re.match(pattern, l) for l in lines]
    groups = [m.groupdict() for m in matches if m]

    return [Battery(**g) for g in groups]


instance = os.getenv('BLOCK_INSTANCE')
batteries = get_battery_data()

for battery in batteries:
    if not instance or battery.id == instance:
        print format_battery(battery)
